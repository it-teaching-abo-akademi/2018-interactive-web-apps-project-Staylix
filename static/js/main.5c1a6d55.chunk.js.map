{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["baseUrl","uriQuote","symbol","encodeURI","Button","react_default","a","createElement","className","this","props","classes","onClick","action","type","content","icon","Component","Loader","SingleInputForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","onSubmit","preventDefault","htmlFor","label","id","onChange","App_Button","buttonClass","buttonContent","DoubleInputForm","_this2","value1","value2","name","labels","types","PortfolioList","_this3","portfolios","currencyRate","addPortfolio","removePortfolio","addStock","removeStock","changeCurrency","addCheckedStock","getCurrencyExchangeRate","nameAlreadyUsed","forEach","portfolio","length","alert","push","stocks","currency","portfolioName","index","splice","stock","_this4","toUpperCase","shares","url","fetch","then","res","json","result","error","symbolAlreadyAdded","stk","stockSymbol","_this5","baseUrlCurrency","portfoliosFromStorage","JSON","parse","localStorage","getItem","window","addEventListener","saveStateToLocalStorage","removeEventListener","setItem","stringify","_this6","listPortfolios","map","App_Portfolio","key","App_SingleInputForm","Portfolio","_this7","callAddStock","callChangeCurrency","_this8","listStocks","App_Stock","App_Switch","App_DoubleInputForm","scope","Logo","src","alt","Stock","_this9","isLoaded","logoLoaded","price","_this10","url_logo","logo","App_Logo","Intl","NumberFormat","style","format","App_Loader","Switch","_this11","clickHandler","leftSwitch","rightSwitch","App","App_PortfolioList","href","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.5c1a6d55.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport logo from './logo.svg';\r\n\r\n\r\n/* This part manage URLs for requests */\r\nconst apiKeyCurrency = \"0ZHUEM2KZK605UBO\";\r\nconst baseUrlCurrency = \"https://www.alphavantage.co/query?apikey=\" + apiKeyCurrency;\r\nconst urlCurrency = baseUrlCurrency + \"&function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=EUR\";\r\n\r\nconst baseUrl = \"https://api.iextrading.com/1.0/\";\r\n\r\nfunction uriQuote(symbol) {\r\n    return baseUrl + \"stock/\" + encodeURI(symbol) + \"/quote\";\r\n}\r\n\r\nfunction uriLogo(symbol) {\r\n    return baseUrl + \"stock/\" + encodeURI(symbol) + \"/logo\";\r\n}\r\n\r\n/* Button with icon component */\r\nclass Button extends Component {\r\n    render() {\r\n        return (\r\n            <button className={this.props.classes} onClick={this.props.action} type={this.props.type}>\r\n                <span>{this.props.content}<i className=\"material-icons\">{this.props.icon}</i></span>\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nclass Loader extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"lds-ellipsis\">\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass SingleInputForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {value: \"\"};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        this.props.onSubmit(this.state.value);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit} className=\"form-inline\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_input\">{this.props.label}</label>\r\n                        <input id=\"id_input\" type=\"text\" className=\"form-control\" value={this.state.value}\r\n                               onChange={this.handleChange}/>\r\n                    </div>\r\n                    <Button classes={this.props.buttonClass} content={this.props.buttonContent}\r\n                            icon={\"add_circle_outline\"}\r\n                            type={\"submit\"}/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass DoubleInputForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {value1: \"\", value2: \"\"};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        let state = this.state;\r\n        state[event.target.name] = event.target.value;\r\n        this.setState(state);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        this.props.onSubmit(this.state);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit} className=\"form-inline m-3\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id_input\">{this.props.labels[0]}</label>\r\n                        <input name=\"value1\" type={this.props.types[0]} className=\"form-control\"\r\n                               value={this.state.value1}\r\n                               onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"form-group ml-2\">\r\n                        <label htmlFor=\"id_input\">{this.props.labels[1]}</label>\r\n                        <input name=\"value2\" type={this.props.types[0]} className=\"form-control\"\r\n                               value={this.state.value2}\r\n                               onChange={this.handleChange}/>\r\n                    </div>\r\n                    <Button classes={this.props.buttonClass} content={this.props.buttonContent}\r\n                            icon={\"add_circle_outline\"}\r\n                            type={\"submit\"}/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass PortfolioList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {portfolios: [], currencyRate: 0};\r\n\r\n        this.addPortfolio = this.addPortfolio.bind(this);\r\n        this.removePortfolio = this.removePortfolio.bind(this);\r\n        this.addStock = this.addStock.bind(this);\r\n        this.removeStock = this.removeStock.bind(this);\r\n        this.changeCurrency = this.changeCurrency.bind(this);\r\n        this.addCheckedStock = this.addCheckedStock.bind(this);\r\n        this.getCurrencyExchangeRate = this.getCurrencyExchangeRate.bind(this);\r\n    }\r\n\r\n    addPortfolio(name) {\r\n        let portfolios = this.state.portfolios;\r\n        let nameAlreadyUsed = false;\r\n        portfolios.forEach(function (portfolio) {\r\n            if (portfolio.name === name) {\r\n                nameAlreadyUsed = true;\r\n            }\r\n        });\r\n        if (portfolios.length >= 10)\r\n            alert('You cannot have more than 10 portfolios.');\r\n        else if (name.length < 1)\r\n            alert('Please choose a name.');\r\n        else if (nameAlreadyUsed)\r\n            alert('This portfolio name is already used.');\r\n        else\r\n            portfolios.push({name: name, stocks: [], currency: \"EUR\"});\r\n        this.setState({portfolios: portfolios});\r\n    }\r\n\r\n    removePortfolio(portfolioName) {\r\n        let portfolios = this.state.portfolios;\r\n        portfolios.forEach(function (portfolio, index) {\r\n            if (portfolio.name === portfolioName) {\r\n                portfolios.splice(index, 1);\r\n            }\r\n        });\r\n        this.setState({portfolios: portfolios});\r\n    }\r\n\r\n    addStock(portfolioName, stock) {\r\n        stock.symbol = stock.symbol.toUpperCase();\r\n        let portfolios = this.state.portfolios;\r\n        if (stock.symbol.length < 1) // TODO: Which sizes allowed?\r\n            alert('Please give the stock symbol.');\r\n        else if (stock.shares < 1)\r\n            alert('Please add at least 1 share.');\r\n        else {\r\n            let url = uriQuote(stock.symbol);\r\n            fetch(url)\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        if (result === {})\r\n                            alert('Unknown symbol.');\r\n                        else {\r\n                            this.addCheckedStock(portfolios, portfolioName, stock);\r\n                        }\r\n                    },\r\n                    (error) => {\r\n                        alert('Unknown symbol. Error: ' + error);\r\n                    }\r\n                );\r\n        }\r\n    }\r\n\r\n    // This function is called only if the symbol is validated.\r\n    addCheckedStock(portfolios, portfolioName, stock) {\r\n        portfolios.forEach(function (portfolio) {\r\n            if (portfolio.name === portfolioName) {\r\n                if (portfolio.stocks.length >= 50)\r\n                    alert('You cannot have more than 10 portfolios.');\r\n                else {\r\n                    let symbolAlreadyAdded = false;\r\n                    portfolio.stocks.forEach(function (stk) {\r\n                        if (stk.symbol === stock.symbol) {\r\n                            symbolAlreadyAdded = true;\r\n                        }\r\n                    });\r\n                    if (symbolAlreadyAdded)\r\n                        alert('This symbol is already added.');\r\n                    else\r\n                        portfolio.stocks.push(stock);\r\n                }\r\n            }\r\n        });\r\n        this.setState({portfolios: portfolios});\r\n    }\r\n\r\n    removeStock(portfolioName, stockSymbol) {\r\n        let portfolios = this.state.portfolios;\r\n        portfolios.forEach(function (portfolio) {\r\n            if (portfolio.name === portfolioName) {\r\n                portfolios.stocks.forEach(function (stock, index) {\r\n                    if (stock.symbol === stockSymbol) {\r\n                        portfolios.stocks.splice(index, 1);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        this.setState({portfolios: portfolios});\r\n    }\r\n\r\n    // This method change the currency of a portfolio and keep it in its state\r\n    changeCurrency(portfolioName) {\r\n        let portfolios = this.state.portfolios;\r\n        portfolios.forEach(function (portfolio) {\r\n            if (portfolio.name === portfolioName) {\r\n                if (portfolio.currency === \"EUR\")\r\n                    portfolio.currency = \"USD\";\r\n                else {\r\n                    portfolio.currency = \"EUR\";\r\n                }\r\n            }\r\n        });\r\n        this.setState({portfolios: portfolios});\r\n    }\r\n\r\n    // This method call the api to know the currency rate to switch from USD to EUR\r\n    getCurrencyExchangeRate() {\r\n        fetch(urlCurrency)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        currencyRate: result['Realtime Currency Exchange Rate']['5. Exchange Rate']\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        currencyRate: 0,\r\n                        error\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCurrencyExchangeRate();\r\n\r\n        // Load portfolios from local storage\r\n        let portfoliosFromStorage = JSON.parse(localStorage.getItem(\"portfolios\"));\r\n        if (typeof portfoliosFromStorage === 'undefined' || portfoliosFromStorage === null)\r\n            portfoliosFromStorage = [];\r\n        this.setState({portfolios: portfoliosFromStorage});\r\n\r\n        window.addEventListener(\r\n            \"beforeunload\",\r\n            this.saveStateToLocalStorage.bind(this)\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\r\n            \"beforeunload\",\r\n            this.saveStateToLocalStorage.bind(this)\r\n        );\r\n\r\n        // saves if component has a chance to unmount\r\n        this.saveStateToLocalStorage();\r\n    }\r\n\r\n    saveStateToLocalStorage() {\r\n        (localStorage.setItem(\"portfolios\", JSON.stringify(this.state.portfolios)));\r\n    }\r\n\r\n    render() {\r\n        let listPortfolios = this.state.portfolios.map((portfolio) =>\r\n            <Portfolio key={portfolio.name}\r\n                       name={portfolio.name}\r\n                       stocks={portfolio.stocks}\r\n                       currency={portfolio.currency}\r\n                       currencyRate={this.state.currencyRate}\r\n                       removePortfolio={this.removePortfolio}\r\n                       addStock={this.addStock}\r\n                       removeStock={this.removeStock}\r\n                       changeCurrency={this.changeCurrency}/>);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"centered\">\r\n                    <h1 className=\"mt-3\">Your Portfolios</h1>\r\n                    <SingleInputForm onSubmit={this.addPortfolio}\r\n                                     label={\"Portfolio Name:\"}\r\n                                     buttonContent={\"Add new Portfolio\"}\r\n                                     buttonClass={\"myBtn-dark\"}/>\r\n                </div>\r\n\r\n                {listPortfolios}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Portfolio extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.callAddStock = this.callAddStock.bind(this);\r\n        this.callChangeCurrency = this.callChangeCurrency.bind(this);\r\n    }\r\n\r\n    callAddStock(state) {\r\n        let stock = {symbol: state.value1, shares: state.value2};\r\n        this.props.addStock(this.props.name, stock);\r\n    }\r\n\r\n    callChangeCurrency() {\r\n        this.props.changeCurrency(this.props.name);\r\n    }\r\n\r\n    render() {\r\n        let listStocks = this.props.stocks.map((stock) =>\r\n            <Stock key={stock.symbol}\r\n                   symbol={stock.symbol}\r\n                   shares={stock.shares}\r\n                   currency={this.props.currency}\r\n                   removeStock={this.props.removeStock}\r\n                   currencyRate={this.props.currencyRate}\r\n            />);\r\n\r\n        return (\r\n            <div className=\"portfolio\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-8\">\r\n                        <h1>{this.props.name}</h1>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        <Switch currency={this.props.currency}\r\n                                changeCurrency={this.callChangeCurrency}/>\r\n                    </div>\r\n                </div>\r\n                <DoubleInputForm onSubmit={this.callAddStock}\r\n                                 types={[\"text\", \"number\"]}\r\n                                 labels={[\"Stock Symbol:\", \"Number of shares:\"]}\r\n                                 buttonContent={\"Add stock\"}\r\n                                 buttonClass={\"myBtn-light\"}/>\r\n\r\n                <table className=\"table\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Symbol</th>\r\n                        <th scope=\"col\">Unit value</th>\r\n                        <th scope=\"col\">Quantity</th>\r\n                        <th scope=\"col\">Total value</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {listStocks}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"centered\">\r\n                    <Button classes={\"myBtn-light\"} content={\"Remove Portfolio\"} icon={\"delete_outline\"}\r\n                            action={this.props.removePortfolio.bind(this, this.props.name)}/>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Logo extends Component {\r\n    render() {\r\n        return (\r\n            <img className=\"logo\" src={this.props.src} alt=\"\"/>\r\n        );\r\n    }\r\n}\r\n\r\nclass Stock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            logoLoaded: false,\r\n            price: 0\r\n        };\r\n        //this.callAddStock = this.callAddStock.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // let url = baseUrl + \"&function=TIME_SERIES_INTRADAY&interval=5min&symbol=\" + encodeURI(this.props.symbol);\r\n        // let url = baseUrl + \"&function=GLOBAL_QUOTE&symbol=\" + encodeURI(this.props.symbol);\r\n        /*let url = baseUrl + \"stock/market/batch?types=quote&symbols=\" + encodeURI(this.props.symbol);\r\n        let url_logo = baseUrl + \"stock/\" + encodeURI(this.props.symbol) + \"/logo\";*/\r\n\r\n        let url = uriQuote(this.props.symbol);\r\n        let url_logo = uriLogo(this.props.symbol);\r\n\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    if (result === {})\r\n                        alert('Unknown symbol.');\r\n                    else {\r\n                        this.setState({\r\n                            isLoaded: true,\r\n                            price: result['latestPrice']\r\n                        });\r\n                    }\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            );\r\n        fetch(url_logo)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    if (result === {})\r\n                        alert(\"Unknown symbol's logo.\");\r\n                    else {\r\n                        this.setState({\r\n                            logoLoaded: true,\r\n                            logo: result[\"url\"]\r\n                        });\r\n                    }\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        logoLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            );\r\n    }\r\n\r\n    render() {\r\n        let elementLoaded, price;\r\n        let currency = this.props.currency;\r\n        if (currency == null)\r\n            currency = \"USD\";\r\n        if (currency === \"EUR\") {\r\n            price = this.state.price * this.props.currencyRate;\r\n        } else {\r\n            price = this.state.price\r\n        }\r\n        if (this.state.isLoaded && this.state.logoLoaded && this.props.currencyRate > 0) {\r\n            elementLoaded =\r\n                <tr>\r\n                    <th scope=\"row\"><Logo src={this.state.logo}/>{this.props.symbol}</th>\r\n                    <td>{new Intl.NumberFormat('fi-FI', {\r\n                        style: 'currency',\r\n                        currency: currency\r\n                    }).format(price)}</td>\r\n                    <td>{this.props.shares}</td>\r\n                    <td>{new Intl.NumberFormat('fi-FI', {\r\n                        style: 'currency',\r\n                        currency: currency\r\n                    }).format(price * this.props.shares)}</td>\r\n                </tr>\r\n        } else {\r\n            elementLoaded =\r\n                <tr>\r\n                    <th scope=\"row\">{this.props.symbol}</th>\r\n                    <td>\r\n                        <Loader/>\r\n                    </td>\r\n                    <td>{this.props.shares}</td>\r\n                    <td>\r\n                        <Loader/>\r\n                    </td>\r\n                </tr>\r\n        }\r\n\r\n        return (\r\n            elementLoaded\r\n        );\r\n    }\r\n}\r\n/*\r\nclass Chart extends Component {\r\n    render() {\r\n        return (\r\n\r\n        );\r\n    }\r\n}\r\n*/\r\nclass Switch extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n    }\r\n\r\n    clickHandler() {\r\n        this.props.changeCurrency();\r\n    }\r\n\r\n    render() {\r\n        let leftSwitch;\r\n        let rightSwitch;\r\n\r\n        if (this.props.currency === \"EUR\") {\r\n            leftSwitch = \"switchActive\";\r\n            rightSwitch = \"switchDisabled\";\r\n        } else {\r\n            rightSwitch = \"switchActive\";\r\n            leftSwitch = \"switchDisabled\";\r\n        }\r\n\r\n        return (\r\n            <div className=\"switch\" onClick={this.clickHandler}>\r\n                <div className={leftSwitch}><i className=\"material-icons\">euro_symbol</i></div>\r\n                <div className={rightSwitch}><i className=\"material-icons\">attach_money</i></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n                    <p>\r\n                        Welcome on the <span className=\"accentuated\">Stock Portfolio Management System</span>.\r\n                    </p>\r\n                </header>\r\n                <main>\r\n                    <div className=\"container\">\r\n                        <PortfolioList/>\r\n                    </div>\r\n                </main>\r\n                <footer className=\"footer\">\r\n                    Data provided for free by <a href=\"https://iextrading.com/developer\">IEX</a>. View <a\r\n                    href=\"https://iextrading.com/api-exhibit-a/\">IEX’s Terms of Use</a>.\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}